version: "3.3"
services:
  postgres_register:
    container_name: postgres_register
    image: debezium/example-postgres
    environment: 
      POSTGRES_USER: register
      POSTGRES_PASSWORD: s3cr3t
    ports:
      - 5432:5432
  postgres_todo:
    container_name: postgres_todo
    image: debezium/example-postgres
    environment: 
      POSTGRES_USER: todo
      POSTGRES_PASSWORD: s3cr3t
    ports:
      - 5433:5432
  postgres_keycloak:
    container_name: postgres_keycloak
    image: debezium/example-postgres
    environment: 
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: s3cr3t
    ports:
      - 5434:5432
  keycloak:
    container_name: keycloak
    image: jboss/keycloak:14.0.0
    environment: 
      DB_VENDOR: POSTGRES
      DB_ADDR: postgres_keycloak
      DB_DATABASE: keycloak
      DB_USER: keycloak
      DB_PASSWORD: s3cr3t
      KEYCLOAK_USER: admin
      KEYCLOAK_PASSWORD: s3cr3t
      KEYCLOAK_IMPORT: /opt/jboss/keycloak/imports/realm-todo.json
    volumes:         
      - ./keycloak:/opt/jboss/keycloak/imports
    ports:
      - 8180:8080
    depends_on:
      - postgres_keycloak
  jager_todo:
    container_name: jager_todo
    image: jaegertracing/all-in-one:1.23.0
    ports:
      - "5775:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"
      - "14268:14268"
      - "14250:14250"
      - "9411:9411"
  zookeeper:
     container_name: zookeper
     image: debezium/zookeeper
     ports:
       - 2181:2181
       - 2888:2888
       - 3888:3888
  kafka:
     container_name: kafka
     image: debezium/kafka
     ports:
       - 9092:9092
     links:
       - zookeeper
     environment:
       - ZOOKEEPER_CONNECT=zookeeper:2181
  kafkadrop:
     container_name: kafkadrop
     image: obsidiandynamics/kafdrop
     environment:
       KAFKA_BROKERCONNECT: kafka:9092
     ports:
       - 9001:9000
     depends_on:
       - kafka
  # kibana:
  #   container_name: kibana
  #   image: docker.elastic.co/kibana/kibana
  #   network_mode: "host"
  #   environment:
  #     ELASTICSEARCH_HOSTS: http://localhost:9200
  # logstash:
  #   image: docker.elastic.co/logstash/logstash-oss
  #   volumes:
  #      - source: ./pipelines
  #        target: /usr/share/logstash/pipeline
  #        type: bind
  connect:
    container_name: debezium_todo
    image: debezium/connect:1.5.4.Final
    user: root
    environment:
      BOOTSTRAP_SERVERS: kafka:9092
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: my_connect_configs
      OFFSET_STORAGE_TOPIC: my_connect_offsets
      STATUS_STORAGE_TOPIC: my_connect_statuses
      CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE: "false"
    ports:
      - 8083:8083
    links:
      - kafka
      - postgres_register
      - postgres_todo
      - postgres_keycloak
    depends_on:
      - kafka
      - zookeeper
      - postgres_register
      - postgres_todo
      - postgres_keycloak
  elasticsearch: # sudo sysctl -w vm.max_map_count=262144
    image: docker.elastic.co/elasticsearch/elasticsearch-oss:6.8.2
    ports:
      - "9200:9200"
    environment:
      ES_JAVA_OPTS: "-Xms512m -Xmx512m"
  mongo:
    image: mongo:4.0
  graylog: # curl -H "Content-Type: application/json" -H "Authorization: Basic YWRtaW46YWRtaW4=" -H "X-Requested-By: curl" -X POST -v -d '{"title":"udp input","configuration":{"recv_buffer_size":262144,"bind_address":"0.0.0.0","port":12201,"decompress_size_limit":8388608},"type":"org.graylog2.inputs.gelf.udp.GELFUDPInput","global":true}' http://localhost:9000/api/system/inputs    
    image: graylog/graylog:3.1
    ports:
      - "9000:9000"
      - "12201:12201/udp"
      - "1514:1514"
    environment:
      GRAYLOG_HTTP_EXTERNAL_URI: "http://127.0.0.1:9000/"
      GRAYLOG_ROOT_TIMEZONE: Brazil/East
    depends_on:
      - elasticsearch
      - mongo
     